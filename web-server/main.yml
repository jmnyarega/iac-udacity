Description: >
  creating a webserver

Parameters:
  ENV:
    Description: Environment name for our web server
    Type: String
  ImageId:
    Type: String
  KeyPairName:
    Type: String

Resources:
  LBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to load balancer
      VpcId:
        Fn::ImportValue:
          !Sub ${ENV}-VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http/ssh
      VpcId:
        Fn::ImportValue:
          !Sub ${ENV}-VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  EC2LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Hello, World" > index.html
          nohup busybox httpd -f -p 8080 &
      ImageId: !Ref ImageId
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - Ref: EC2SG
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"

  EC2ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${ENV}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: EC2LaunchConfiguration
      MinSize: '3'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: LBTargetGroup

  #TODO: get output from here as a URL i.e https://
  EC2LB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: # LoadBalancer needs > 1 subnets to work - enhance higher Availability
      - Fn::ImportValue: !Sub ${ENV}-PUB1-SN
      - Fn::ImportValue: !Sub ${ENV}-PUB2-SN
      SecurityGroups:
      - Ref: LBSG

  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LBTargetGroup
      LoadBalancerArn:
        Ref: EC2LB
      Port: 80
      Protocol: HTTP

  LBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref LBTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref LBListener
      Priority: 1

  LBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: ${ENV}-VPC

Outputs:
  PublicUrl:
    Description: public url from load balancer
    Value: !GetAtt EC2LB.DNSName
    Export:
      Name: !Sub ${ENV}-PUBLIC-URL
